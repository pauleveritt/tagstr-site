{"version":3,"file":"4905.a1040e4.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/drive.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/emscripten.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/drivefs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/contents/lib/drivecontents.js"],"sourcesContent":["import { PageConfig } from '@jupyterlab/coreutils';\nimport mime from 'mime';\n/**\n * Commonly-used mimetypes\n */\nexport var MIME;\n(function (MIME) {\n    MIME.JSON = 'application/json';\n    MIME.PLAIN_TEXT = 'text/plain';\n    MIME.OCTET_STREAM = 'octet/stream';\n})(MIME || (MIME = {}));\n/**\n * A namespace for file constructs.\n */\nexport var FILE;\n(function (FILE) {\n    /**\n     * Build-time configured file types.\n     */\n    const TYPES = JSON.parse(PageConfig.getOption('fileTypes') || '{}');\n    /**\n     * Get a mimetype (or fallback).\n     */\n    function getType(ext, defaultType = null) {\n        ext = ext.toLowerCase();\n        for (const fileType of Object.values(TYPES)) {\n            for (const fileExt of fileType.extensions || []) {\n                if (fileExt === ext && fileType.mimeTypes && fileType.mimeTypes.length) {\n                    return fileType.mimeTypes[0];\n                }\n            }\n        }\n        return mime.getType(ext) || defaultType || MIME.OCTET_STREAM;\n    }\n    FILE.getType = getType;\n    /**\n     * Determine whether the given extension matches a given fileFormat.\n     */\n    function hasFormat(ext, fileFormat) {\n        ext = ext.toLowerCase();\n        for (const fileType of Object.values(TYPES)) {\n            if (fileType.fileFormat !== fileFormat) {\n                continue;\n            }\n            for (const fileExt of fileType.extensions || []) {\n                if (fileExt === ext) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    FILE.hasFormat = hasFormat;\n})(FILE || (FILE = {}));\n//# sourceMappingURL=tokens.js.map","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { FILE, MIME } from './tokens';\n/**\n * The name of the local storage.\n */\nconst DEFAULT_STORAGE_NAME = 'JupyterLite Storage';\n/**\n * The name of the drive.\n */\nexport const DRIVE_NAME = 'BrowserStorage';\n/**\n * The number of checkpoints to save.\n */\nconst N_CHECKPOINTS = 5;\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n/**\n * A custom drive to store files in the browser storage.\n */\nexport class BrowserStorageDrive {\n    /**\n     * Construct a new localForage-powered contents provider\n     */\n    constructor(options) {\n        var _a;\n        /**\n         * A reducer for turning arbitrary binary into a string\n         */\n        this.reduceBytesToString = (data, byte) => {\n            return data + String.fromCharCode(byte);\n        };\n        this._serverContents = new Map();\n        this._isDisposed = false;\n        this._fileChanged = new Signal(this);\n        this._storageName = DEFAULT_STORAGE_NAME;\n        this._storageDrivers = null;\n        this._localforage = options.localforage;\n        this._storageName = options.storageName || DEFAULT_STORAGE_NAME;\n        this._storageDrivers = options.storageDrivers || null;\n        this._serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : ServerConnection.makeSettings();\n        this._ready = new PromiseDelegate();\n        this.initialize().catch(console.warn);\n    }\n    /**\n     * Dispose the drive.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the drive is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The name of the drive.\n     */\n    get name() {\n        return DRIVE_NAME;\n    }\n    /**\n     * The server settings of the drive.\n     */\n    get serverSettings() {\n        return this._serverSettings;\n    }\n    /**\n     * Signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the download URL\n     */\n    async getDownloadUrl(path) {\n        throw new Error('Method not implemented.');\n    }\n    /**\n     * Finish any initialization after server has started and all extensions are applied.\n     *\n     * TODO: keep private?\n     */\n    async initialize() {\n        await this.initStorage();\n        this._ready.resolve(void 0);\n    }\n    /**\n     * Initialize all storage instances\n     */\n    async initStorage() {\n        this._storage = this.createDefaultStorage();\n        this._counters = this.createDefaultCounters();\n        this._checkpoints = this.createDefaultCheckpoints();\n    }\n    /**\n     * A promise that resolves once all storage is fully initialized.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * A lazy reference to the underlying storage.\n     */\n    get storage() {\n        return this.ready.then(() => this._storage);\n    }\n    /**\n     * A lazy reference to the underlying counters.\n     */\n    get counters() {\n        return this.ready.then(() => this._counters);\n    }\n    /**\n     * A lazy reference to the underlying checkpoints.\n     */\n    get checkpoints() {\n        return this.ready.then(() => this._checkpoints);\n    }\n    /**\n     * Get default options for localForage instances\n     */\n    get defaultStorageOptions() {\n        const driver = this._storageDrivers && this._storageDrivers.length ? this._storageDrivers : null;\n        return {\n            version: 1,\n            name: this._storageName,\n            ...(driver ? { driver } : {}),\n        };\n    }\n    /**\n     * Initialize the default storage for contents.\n     */\n    createDefaultStorage() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Notebooks and Files',\n            storeName: 'files',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Initialize the default storage for counting file suffixes.\n     */\n    createDefaultCounters() {\n        return this._localforage.createInstance({\n            description: 'Store the current file suffix counters',\n            storeName: 'counters',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Create the default checkpoint storage.\n     */\n    createDefaultCheckpoints() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Checkpoints',\n            storeName: 'checkpoints',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Clear all storage (files, counters, and checkpoints).\n     *\n     * @returns A promise which resolves when all storage is cleared.\n     */\n    async clearStorage() {\n        await Promise.all([\n            (await this.storage).clear(),\n            (await this.counters).clear(),\n            (await this.checkpoints).clear(),\n        ]);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the file is created.\n     */\n    async newUntitled(options) {\n        var _a, _b, _c;\n        const path = (_a = options === null || options === void 0 ? void 0 : options.path) !== null && _a !== void 0 ? _a : '';\n        const type = (_b = options === null || options === void 0 ? void 0 : options.type) !== null && _b !== void 0 ? _b : 'notebook';\n        const created = new Date().toISOString();\n        let dirname = PathExt.dirname(path);\n        const basename = PathExt.basename(path);\n        const extname = PathExt.extname(path);\n        const item = await this.get(dirname).catch(() => null);\n        // handle the case of \"Save As\", where the path points to the new file\n        // to create, e.g. subfolder/example-copy.ipynb\n        let name = '';\n        if (path && !extname && item) {\n            // directory\n            dirname = `${path}/`;\n            name = '';\n        }\n        else if (dirname && basename) {\n            // file in a subfolder\n            dirname = `${dirname}/`;\n            name = basename;\n        }\n        else {\n            // file at the top level\n            dirname = '';\n            name = path;\n        }\n        let file;\n        switch (type) {\n            case 'directory': {\n                const counter = await this._incrementCounter('directory');\n                name = `Untitled Folder${counter || ''}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: '',\n                    content: null,\n                    size: 0,\n                    writable: true,\n                    type: 'directory',\n                };\n                break;\n            }\n            case 'notebook': {\n                const counter = await this._incrementCounter('notebook');\n                name = name || `Untitled${counter || ''}.ipynb`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format: 'json',\n                    mimetype: MIME.JSON,\n                    content: Private.EMPTY_NB,\n                    size: encoder.encode(JSON.stringify(Private.EMPTY_NB)).length,\n                    writable: true,\n                    type: 'notebook',\n                };\n                break;\n            }\n            default: {\n                let ext = (_c = options === null || options === void 0 ? void 0 : options.ext) !== null && _c !== void 0 ? _c : '.txt';\n                if (!ext.startsWith('.')) {\n                    ext = `.${ext}`;\n                }\n                const counter = await this._incrementCounter('file');\n                const mimetype = FILE.getType(ext) || MIME.OCTET_STREAM;\n                let format;\n                if (FILE.hasFormat(ext, 'text') || mimetype.indexOf('text') !== -1) {\n                    format = 'text';\n                }\n                else if (ext.indexOf('json') !== -1 || ext.indexOf('ipynb') !== -1) {\n                    format = 'json';\n                }\n                else {\n                    format = 'base64';\n                }\n                name = name || `untitled${counter || ''}${ext}`;\n                file = {\n                    name,\n                    path: `${dirname}${name}`,\n                    last_modified: created,\n                    created,\n                    format,\n                    mimetype,\n                    content: '',\n                    size: 0,\n                    writable: true,\n                    type: 'file',\n                };\n                break;\n            }\n        }\n        const key = file.path;\n        await (await this.storage).setItem(key, file);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: file,\n        });\n        return file;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    async copy(path, toDir) {\n        let name = PathExt.basename(path);\n        toDir = toDir === '' ? '' : `${PathExt.removeSlash(toDir)}/`;\n        // TODO: better handle naming collisions with existing files\n        while (await this.get(`${toDir}${name}`, { content: true })\n            .then(() => true)\n            .catch(() => false)) {\n            const ext = PathExt.extname(name);\n            const base = name.replace(ext, '');\n            name = `${base} (copy)${ext}`;\n        }\n        const toPath = `${toDir}${name}`;\n        let item = await this.get(path, { content: true }).catch(() => null);\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        item = {\n            ...item,\n            name,\n            path: toPath,\n        };\n        await (await this.storage).setItem(toPath, item);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: item,\n        });\n        return item;\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    async get(path, options) {\n        // remove leading slash\n        path = decodeURIComponent(path.replace(/^\\//, ''));\n        if (path === '') {\n            const folder = await this._getFolder(path);\n            if (folder === null) {\n                throw Error(`Could not find file with path ${path}`);\n            }\n            return folder;\n        }\n        const storage = await this.storage;\n        const item = await storage.getItem(path);\n        const serverItem = await this._getServerContents(path, options);\n        const model = (item || serverItem);\n        if (!model) {\n            throw Error(`Could not find content with path ${path}`);\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.content)) {\n            return {\n                size: 0,\n                ...model,\n                content: null,\n            };\n        }\n        // for directories, find all files with the path as the prefix\n        if (model.type === 'directory') {\n            const contentMap = new Map();\n            await storage.iterate((file, key) => {\n                // use an additional slash to not include the directory itself\n                if (key === `${path}/${file.name}`) {\n                    contentMap.set(file.name, file);\n                }\n            });\n            const serverContents = serverItem\n                ? serverItem.content\n                : Array.from((await this._getServerDirectory(path)).values());\n            for (const file of serverContents) {\n                if (!contentMap.has(file.name)) {\n                    contentMap.set(file.name, file);\n                }\n            }\n            const content = [...contentMap.values()];\n            return {\n                name: PathExt.basename(path),\n                path,\n                last_modified: model.last_modified,\n                created: model.created,\n                format: 'json',\n                mimetype: MIME.JSON,\n                content,\n                size: 0,\n                writable: true,\n                type: 'directory',\n            };\n        }\n        return model;\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the file is renamed.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const path = decodeURIComponent(oldLocalPath);\n        const file = await this.get(path, { content: true }).catch(() => null);\n        if (!file) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const modified = new Date().toISOString();\n        const name = PathExt.basename(newLocalPath);\n        const newFile = {\n            ...file,\n            name,\n            path: newLocalPath,\n            last_modified: modified,\n        };\n        const storage = await this.storage;\n        await storage.setItem(newLocalPath, newFile);\n        // remove the old file\n        await storage.removeItem(path);\n        // remove the corresponding checkpoint\n        await (await this.checkpoints).removeItem(path);\n        // if a directory, recurse through all children\n        if (file.type === 'directory') {\n            let child;\n            for (child of file.content) {\n                await this.rename(URLExt.join(oldLocalPath, child.name), URLExt.join(newLocalPath, child.name));\n            }\n        }\n        this._fileChanged.emit({\n            type: 'rename',\n            oldValue: { path: oldLocalPath },\n            newValue: newFile,\n        });\n        return newFile;\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the file is saved.\n     */\n    async save(path, options = {}) {\n        var _a;\n        path = decodeURIComponent(path);\n        // process the file if coming from an upload\n        const ext = PathExt.extname((_a = options.name) !== null && _a !== void 0 ? _a : '');\n        const chunk = options.chunk;\n        // retrieve the content if it is a later chunk or the last one\n        // the new content will then be appended to the existing one\n        const appendChunk = chunk ? chunk > 1 || chunk === -1 : false;\n        let item = await this.get(path, { content: appendChunk }).catch(() => null);\n        if (!item) {\n            item = await this.newUntitled({ path, ext, type: 'file' });\n        }\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        // keep a reference to the original content\n        const originalContent = item.content;\n        const modified = new Date().toISOString();\n        // override with the new values\n        item = {\n            ...item,\n            ...options,\n            last_modified: modified,\n        };\n        if (options.content && options.format === 'base64') {\n            const lastChunk = chunk ? chunk === -1 : true;\n            const contentBinaryString = this._handleUploadChunk(options.content, originalContent, appendChunk);\n            if (ext === '.ipynb') {\n                const content = lastChunk\n                    ? JSON.parse(decoder.decode(this._binaryStringToBytes(contentBinaryString)))\n                    : contentBinaryString;\n                item = {\n                    ...item,\n                    content,\n                    format: 'json',\n                    type: 'notebook',\n                    size: contentBinaryString.length,\n                };\n            }\n            else if (FILE.hasFormat(ext, 'json')) {\n                const content = lastChunk\n                    ? JSON.parse(decoder.decode(this._binaryStringToBytes(contentBinaryString)))\n                    : contentBinaryString;\n                item = {\n                    ...item,\n                    content,\n                    format: 'json',\n                    type: 'file',\n                    size: contentBinaryString.length,\n                };\n            }\n            else if (FILE.hasFormat(ext, 'text')) {\n                const content = lastChunk\n                    ? decoder.decode(this._binaryStringToBytes(contentBinaryString))\n                    : contentBinaryString;\n                item = {\n                    ...item,\n                    content,\n                    format: 'text',\n                    type: 'file',\n                    size: contentBinaryString.length,\n                };\n            }\n            else {\n                const content = lastChunk ? btoa(contentBinaryString) : contentBinaryString;\n                item = {\n                    ...item,\n                    content,\n                    format: 'base64',\n                    type: 'file',\n                    size: contentBinaryString.length,\n                };\n            }\n        }\n        // fixup content sizes if necessary\n        if (item.content) {\n            switch (options.format) {\n                case 'json': {\n                    item = { ...item, size: encoder.encode(JSON.stringify(item.content)).length };\n                    break;\n                }\n                case 'text': {\n                    item = { ...item, size: encoder.encode(item.content).length };\n                    break;\n                }\n                // base64 save was already handled above\n                case 'base64': {\n                    break;\n                }\n                default: {\n                    item = { ...item, size: 0 };\n                    break;\n                }\n            }\n        }\n        else {\n            item = { ...item, size: 0 };\n        }\n        await (await this.storage).setItem(path, item);\n        this._fileChanged.emit({\n            type: 'save',\n            oldValue: null,\n            newValue: item,\n        });\n        return item;\n    }\n    /**\n     * Delete a file from browser storage.\n     *\n     * Has no effect on server-backed files, which will re-appear with their\n     * original timestamp.\n     *\n     * @param path - The path to the file.\n     */\n    async delete(path) {\n        path = decodeURIComponent(path);\n        const slashed = `${path}/`;\n        const toDelete = (await (await this.storage).keys()).filter((key) => key === path || key.startsWith(slashed));\n        await Promise.all(toDelete.map(this.forgetPath, this));\n        this._fileChanged.emit({\n            type: 'delete',\n            oldValue: { path },\n            newValue: null,\n        });\n    }\n    /**\n     * Remove the localForage and checkpoints for a path.\n     *\n     * @param path - The path to the file\n     */\n    async forgetPath(path) {\n        await Promise.all([\n            (await this.storage).removeItem(path),\n            (await this.checkpoints).removeItem(path),\n        ]);\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    async createCheckpoint(path) {\n        var _a;\n        const checkpoints = await this.checkpoints;\n        path = decodeURIComponent(path);\n        const item = await this.get(path, { content: true }).catch(() => null);\n        if (!item) {\n            throw Error(`Could not find file with path ${path}`);\n        }\n        const copies = ((_a = (await checkpoints.getItem(path))) !== null && _a !== void 0 ? _a : []).filter(Boolean);\n        copies.push(item);\n        // keep only a certain amount of checkpoints per file\n        if (copies.length > N_CHECKPOINTS) {\n            copies.splice(0, copies.length - N_CHECKPOINTS);\n        }\n        await checkpoints.setItem(path, copies);\n        const id = `${copies.length - 1}`;\n        return { id, last_modified: item.last_modified };\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    async listCheckpoints(path) {\n        const copies = (await (await this.checkpoints).getItem(path)) || [];\n        return copies.filter(Boolean).map(this.normalizeCheckpoint, this);\n    }\n    normalizeCheckpoint(model, id) {\n        return { id: id.toString(), last_modified: model.last_modified };\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    async restoreCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await (await this.checkpoints).getItem(path)) || []);\n        const id = parseInt(checkpointID);\n        const item = copies[id];\n        await (await this.storage).setItem(path, item);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    async deleteCheckpoint(path, checkpointID) {\n        path = decodeURIComponent(path);\n        const copies = ((await (await this.checkpoints).getItem(path)) || []);\n        const id = parseInt(checkpointID);\n        copies.splice(id, 1);\n        await (await this.checkpoints).setItem(path, copies);\n    }\n    /**\n     * Handle an upload chunk for a file.\n     * each chunk is base64 encoded, so we need to decode it and append it to the\n     * original content.\n     * @param newContent the new content to process, base64 encoded\n     * @param originalContent the original content, must be null or a binary string if chunked is true\n     * @param appendChunk whether the chunk should be appended to the originalContent\n     *\n     *\n     * @returns the decoded binary string, appended to the original content if requested\n     * /\n     */\n    _handleUploadChunk(newContent, originalContent, appendChunk) {\n        const newContentBinaryString = atob(newContent);\n        const contentBinaryString = appendChunk\n            ? originalContent + newContentBinaryString\n            : newContentBinaryString;\n        return contentBinaryString;\n    }\n    /**\n     * Convert a binary string to an Uint8Array\n     * @param binaryString the binary string\n     * @returns the bytes of the binary string\n     */\n    _binaryStringToBytes(binaryString) {\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes;\n    }\n    /**\n     * retrieve the contents for this path from the union of local storage and\n     * `api/contents/{path}/all.json`.\n     *\n     * @param path - The contents path to retrieve\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getFolder(path) {\n        const content = new Map();\n        const storage = await this.storage;\n        await storage.iterate((file, key) => {\n            if (key.includes('/')) {\n                return;\n            }\n            content.set(file.path, file);\n        });\n        // layer in contents that don't have local overwrites\n        for (const file of (await this._getServerDirectory(path)).values()) {\n            if (!content.has(file.path)) {\n                content.set(file.path, file);\n            }\n        }\n        if (path && content.size === 0) {\n            return null;\n        }\n        return {\n            name: '',\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'json',\n            mimetype: MIME.JSON,\n            content: Array.from(content.values()),\n            size: 0,\n            writable: true,\n            type: 'directory',\n        };\n    }\n    /**\n     * Attempt to recover the model from `{:path}/__all__.json` file, fall back to\n     * deriving the model (including content) off the file in `/files/`. Otherwise\n     * return `null`.\n     */\n    async _getServerContents(path, options) {\n        const name = PathExt.basename(path);\n        const parentContents = await this._getServerDirectory(URLExt.join(path, '..'));\n        let model = parentContents.get(name);\n        if (!model) {\n            return null;\n        }\n        model = model || {\n            name,\n            path,\n            last_modified: new Date(0).toISOString(),\n            created: new Date(0).toISOString(),\n            format: 'text',\n            mimetype: MIME.PLAIN_TEXT,\n            type: 'file',\n            writable: true,\n            size: 0,\n            content: '',\n        };\n        if (options === null || options === void 0 ? void 0 : options.content) {\n            if (model.type === 'directory') {\n                const serverContents = await this._getServerDirectory(path);\n                model = { ...model, content: Array.from(serverContents.values()) };\n            }\n            else {\n                const fileUrl = URLExt.join(PageConfig.getBaseUrl(), 'files', path);\n                const response = await fetch(fileUrl);\n                if (!response.ok) {\n                    return null;\n                }\n                const mimetype = model.mimetype || response.headers.get('Content-Type');\n                const ext = PathExt.extname(name);\n                if (model.type === 'notebook' ||\n                    FILE.hasFormat(ext, 'json') ||\n                    (mimetype === null || mimetype === void 0 ? void 0 : mimetype.indexOf('json')) !== -1 ||\n                    path.match(/\\.(ipynb|[^/]*json[^/]*)$/)) {\n                    const contentText = await response.text();\n                    model = {\n                        ...model,\n                        content: JSON.parse(contentText),\n                        format: 'json',\n                        mimetype: model.mimetype || MIME.JSON,\n                        size: encoder.encode(contentText).length,\n                    };\n                }\n                else if (FILE.hasFormat(ext, 'text') || mimetype.indexOf('text') !== -1) {\n                    const contentText = await response.text();\n                    model = {\n                        ...model,\n                        content: contentText,\n                        format: 'text',\n                        mimetype: mimetype || MIME.PLAIN_TEXT,\n                        size: encoder.encode(contentText).length,\n                    };\n                }\n                else {\n                    const contentBuffer = await response.arrayBuffer();\n                    const contentBytes = new Uint8Array(contentBuffer);\n                    model = {\n                        ...model,\n                        content: btoa(contentBytes.reduce(this.reduceBytesToString, '')),\n                        format: 'base64',\n                        mimetype: mimetype || MIME.OCTET_STREAM,\n                        size: contentBytes.length,\n                    };\n                }\n            }\n        }\n        return model;\n    }\n    /**\n     * retrieve the contents for this path from `__index__.json` in the appropriate\n     * folder.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with a Map of contents, keyed by local file name\n     */\n    async _getServerDirectory(path) {\n        const content = this._serverContents.get(path) || new Map();\n        if (!this._serverContents.has(path)) {\n            const apiURL = URLExt.join(PageConfig.getBaseUrl(), 'api/contents', path, 'all.json');\n            try {\n                const response = await fetch(apiURL);\n                const json = JSON.parse(await response.text());\n                for (const file of json['content']) {\n                    content.set(file.name, file);\n                }\n            }\n            catch (err) {\n                console.warn(`don't worry, about ${err}... nothing's broken. If there had been a\n          file at ${apiURL}, you might see some more files.`);\n            }\n            this._serverContents.set(path, content);\n        }\n        return content;\n    }\n    /**\n     * Increment the counter for a given file type.\n     * Used to avoid collisions when creating new untitled files.\n     *\n     * @param type The file type to increment the counter for.\n     */\n    async _incrementCounter(type) {\n        var _a;\n        const counters = await this.counters;\n        const current = (_a = (await counters.getItem(type))) !== null && _a !== void 0 ? _a : -1;\n        const counter = current + 1;\n        await counters.setItem(type, counter);\n        return counter;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The content for an empty notebook.\n     */\n    Private.EMPTY_NB = {\n        metadata: {\n            orig_nbformat: 4,\n        },\n        nbformat_minor: 5,\n        nbformat: 4,\n        cells: [],\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=drive.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/// <reference path=\"../../../node_modules/@types/emscripten/index.d.ts\" preserve=\"true\" />\nexport const DIR_MODE = 16895; // 040777\nexport const FILE_MODE = 33206; // 100666\nexport const SEEK_CUR = 1;\nexport const SEEK_END = 2;\nexport function instanceOfStream(nodeOrStream) {\n    return 'node' in nodeOrStream;\n}\n//# sourceMappingURL=emscripten.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DIR_MODE, SEEK_CUR, SEEK_END, instanceOfStream, } from './emscripten';\nexport const DRIVE_SEPARATOR = ':';\nexport const DRIVE_API_PATH = '/api/drive.v1';\nexport const BLOCK_SIZE = 4096;\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n// Mapping flag -> do we need to overwrite the file upon closing it\nconst flagNeedsWrite = {\n    0 /*O_RDONLY*/: false,\n    1 /*O_WRONLY*/: true,\n    2 /*O_RDWR*/: true,\n    64 /*O_CREAT*/: true,\n    65 /*O_WRONLY|O_CREAT*/: true,\n    66 /*O_RDWR|O_CREAT*/: true,\n    129 /*O_WRONLY|O_EXCL*/: true,\n    193 /*O_WRONLY|O_CREAT|O_EXCL*/: true,\n    514 /*O_RDWR|O_TRUNC*/: true,\n    577 /*O_WRONLY|O_CREAT|O_TRUNC*/: true,\n    578 /*O_CREAT|O_RDWR|O_TRUNC*/: true,\n    705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: true,\n    706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: true,\n    1024 /*O_APPEND*/: true,\n    1025 /*O_WRONLY|O_APPEND*/: true,\n    1026 /*O_RDWR|O_APPEND*/: true,\n    1089 /*O_WRONLY|O_CREAT|O_APPEND*/: true,\n    1090 /*O_RDWR|O_CREAT|O_APPEND*/: true,\n    1153 /*O_WRONLY|O_EXCL|O_APPEND*/: true,\n    1154 /*O_RDWR|O_EXCL|O_APPEND*/: true,\n    1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: true,\n    1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: true,\n    4096 /*O_RDONLY|O_DSYNC*/: true,\n    4098 /*O_RDWR|O_DSYNC*/: true,\n};\nexport class DriveFSEmscriptenStreamOps {\n    constructor(fs) {\n        this.fs = fs;\n    }\n    open(stream) {\n        const path = this.fs.realPath(stream.node);\n        if (this.fs.FS.isFile(stream.node.mode)) {\n            stream.file = this.fs.API.get(path);\n        }\n    }\n    close(stream) {\n        if (!this.fs.FS.isFile(stream.node.mode) || !stream.file) {\n            return;\n        }\n        const path = this.fs.realPath(stream.node);\n        const flags = stream.flags;\n        let parsedFlags = typeof flags === 'string' ? parseInt(flags, 10) : flags;\n        parsedFlags &= 0x1fff;\n        let needsWrite = true;\n        if (parsedFlags in flagNeedsWrite) {\n            needsWrite = flagNeedsWrite[parsedFlags];\n        }\n        if (needsWrite) {\n            this.fs.API.put(path, stream.file);\n        }\n        stream.file = undefined;\n    }\n    read(stream, buffer, offset, length, position) {\n        if (length <= 0 ||\n            stream.file === undefined ||\n            position >= (stream.file.data.length || 0)) {\n            return 0;\n        }\n        const size = Math.min(stream.file.data.length - position, length);\n        buffer.set(stream.file.data.subarray(position, position + size), offset);\n        return size;\n    }\n    write(stream, buffer, offset, length, position) {\n        var _a;\n        if (length <= 0 || stream.file === undefined) {\n            return 0;\n        }\n        stream.node.timestamp = Date.now();\n        if (position + length > (((_a = stream.file) === null || _a === void 0 ? void 0 : _a.data.length) || 0)) {\n            const oldData = stream.file.data ? stream.file.data : new Uint8Array();\n            stream.file.data = new Uint8Array(position + length);\n            stream.file.data.set(oldData);\n        }\n        stream.file.data.set(buffer.subarray(offset, offset + length), position);\n        return length;\n    }\n    llseek(stream, offset, whence) {\n        let position = offset;\n        if (whence === SEEK_CUR) {\n            position += stream.position;\n        }\n        else if (whence === SEEK_END) {\n            if (this.fs.FS.isFile(stream.node.mode)) {\n                if (stream.file !== undefined) {\n                    position += stream.file.data.length;\n                }\n                else {\n                    throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EPERM);\n                }\n            }\n        }\n        if (position < 0) {\n            throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EINVAL);\n        }\n        return position;\n    }\n}\nexport class DriveFSEmscriptenNodeOps {\n    constructor(fs) {\n        this.fs = fs;\n    }\n    node(nodeOrStream) {\n        if (instanceOfStream(nodeOrStream)) {\n            return nodeOrStream.node;\n        }\n        return nodeOrStream;\n    }\n    getattr(value) {\n        const node = this.node(value);\n        return {\n            ...this.fs.API.getattr(this.fs.realPath(node)),\n            mode: node.mode,\n            ino: node.id,\n        };\n    }\n    setattr(value, attr) {\n        const node = this.node(value);\n        for (const [key, value] of Object.entries(attr)) {\n            switch (key) {\n                case 'mode':\n                    node.mode = value;\n                    break;\n                case 'timestamp':\n                    node.timestamp = value;\n                    break;\n                case 'size': {\n                    const size = value;\n                    const path = this.fs.realPath(node);\n                    if (this.fs.FS.isFile(node.mode) && size >= 0) {\n                        const file = this.fs.API.get(path);\n                        const oldData = file.data ? file.data : new Uint8Array();\n                        if (size !== oldData.length) {\n                            if (size < oldData.length) {\n                                file.data = file.data.slice(0, size);\n                            }\n                            else {\n                                file.data = new Uint8Array(size);\n                                file.data.set(oldData);\n                            }\n                            this.fs.API.put(path, file);\n                        }\n                    }\n                    else {\n                        console.warn('setattr size of', size, 'on', node, 'not yet implemented');\n                    }\n                    break;\n                }\n                default:\n                    console.warn('setattr', key, 'of', value, 'on', node, 'not yet implemented');\n                    break;\n            }\n        }\n    }\n    lookup(parent, name) {\n        const node = this.node(parent);\n        const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n        const result = this.fs.API.lookup(path);\n        if (!result.ok) {\n            throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['ENOENT']);\n        }\n        return this.fs.createNode(node, name, result.mode, 0);\n    }\n    mknod(parent, name, mode, dev) {\n        const node = this.node(parent);\n        const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n        this.fs.API.mknod(path, mode);\n        return this.fs.createNode(node, name, mode, dev);\n    }\n    rename(value, newDir, newName) {\n        const oldNode = this.node(value);\n        const newDirNode = this.node(newDir);\n        this.fs.API.rename(oldNode.parent\n            ? this.fs.PATH.join2(this.fs.realPath(oldNode.parent), oldNode.name)\n            : oldNode.name, this.fs.PATH.join2(this.fs.realPath(newDirNode), newName));\n        // Updating the in-memory node\n        oldNode.name = newName;\n        oldNode.parent = newDirNode;\n    }\n    unlink(parent, name) {\n        this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n    }\n    rmdir(parent, name) {\n        this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n    }\n    readdir(value) {\n        return this.fs.API.readdir(this.fs.realPath(this.node(value)));\n    }\n    symlink(parent, newName, oldPath) {\n        throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n    }\n    readlink(node) {\n        throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n    }\n}\n/**\n * ContentsAPI base class\n */\nexport class ContentsAPI {\n    constructor(options) {\n        this._driveName = options.driveName;\n        this._mountpoint = options.mountpoint;\n        this.FS = options.FS;\n        this.ERRNO_CODES = options.ERRNO_CODES;\n    }\n    lookup(path) {\n        return this.request({ method: 'lookup', path: this.normalizePath(path) });\n    }\n    getmode(path) {\n        return this.request({ method: 'getmode', path: this.normalizePath(path) });\n    }\n    mknod(path, mode) {\n        return this.request({\n            method: 'mknod',\n            path: this.normalizePath(path),\n            data: { mode },\n        });\n    }\n    rename(oldPath, newPath) {\n        return this.request({\n            method: 'rename',\n            path: this.normalizePath(oldPath),\n            data: { newPath: this.normalizePath(newPath) },\n        });\n    }\n    readdir(path) {\n        const dirlist = this.request({\n            method: 'readdir',\n            path: this.normalizePath(path),\n        });\n        dirlist.push('.');\n        dirlist.push('..');\n        return dirlist;\n    }\n    rmdir(path) {\n        return this.request({ method: 'rmdir', path: this.normalizePath(path) });\n    }\n    get(path) {\n        const response = this.request({\n            method: 'get',\n            path: this.normalizePath(path),\n        });\n        if (!response) {\n            throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n        }\n        const serializedContent = response.content;\n        const format = response.format;\n        switch (format) {\n            case 'json':\n            case 'text':\n                return {\n                    data: encoder.encode(serializedContent),\n                    format,\n                };\n            case 'base64': {\n                const binString = atob(serializedContent);\n                const len = binString.length;\n                const data = new Uint8Array(len);\n                for (let i = 0; i < len; i++) {\n                    data[i] = binString.charCodeAt(i);\n                }\n                return {\n                    data,\n                    format,\n                };\n            }\n            default:\n                throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n        }\n    }\n    put(path, value) {\n        switch (value.format) {\n            case 'json':\n            case 'text':\n                return this.request({\n                    method: 'put',\n                    path: this.normalizePath(path),\n                    data: {\n                        format: value.format,\n                        data: decoder.decode(value.data),\n                    },\n                });\n            case 'base64': {\n                let binary = '';\n                for (let i = 0; i < value.data.byteLength; i++) {\n                    binary += String.fromCharCode(value.data[i]);\n                }\n                return this.request({\n                    method: 'put',\n                    path: this.normalizePath(path),\n                    data: {\n                        format: value.format,\n                        data: btoa(binary),\n                    },\n                });\n            }\n        }\n    }\n    getattr(path) {\n        const stats = this.request({\n            method: 'getattr',\n            path: this.normalizePath(path),\n        });\n        // Turn datetimes into proper objects\n        if (stats.atime) {\n            stats.atime = new Date(stats.atime);\n        }\n        if (stats.mtime) {\n            stats.mtime = new Date(stats.mtime);\n        }\n        if (stats.ctime) {\n            stats.ctime = new Date(stats.ctime);\n        }\n        // ensure a non-undefined size (0 isn't great, though)\n        stats.size = stats.size || 0;\n        return stats;\n    }\n    /**\n     * Normalize a Path by making it compliant for the content manager\n     *\n     * @param path: the path relatively to the Emscripten drive\n     */\n    normalizePath(path) {\n        // Remove mountpoint prefix\n        if (path.startsWith(this._mountpoint)) {\n            path = path.slice(this._mountpoint.length);\n        }\n        // Add JupyterLab drive name\n        if (this._driveName) {\n            path = `${this._driveName}${DRIVE_SEPARATOR}${path}`;\n        }\n        return path;\n    }\n}\n/**\n * An Emscripten-compatible synchronous Contents API using the service worker.\n */\nexport class ServiceWorkerContentsAPI extends ContentsAPI {\n    /**\n     * Construct a new ServiceWorkerContentsAPI.\n     */\n    constructor(options) {\n        super(options);\n        this._baseUrl = options.baseUrl;\n        this._browsingContextId = options.browsingContextId || '';\n    }\n    request(data) {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', encodeURI(this.endpoint), false);\n        // Add the origin browsing context ID to the request\n        const requestWithBrowsingContextId = {\n            data,\n            browsingContextId: this._browsingContextId,\n        };\n        try {\n            xhr.send(JSON.stringify(requestWithBrowsingContextId));\n        }\n        catch (e) {\n            console.error(e);\n        }\n        if (xhr.status >= 400) {\n            throw new this.FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n        }\n        return JSON.parse(xhr.responseText);\n    }\n    /**\n     * Get the api/drive endpoint\n     */\n    get endpoint() {\n        return `${this._baseUrl}api/drive`;\n    }\n}\nexport class DriveFS {\n    constructor(options) {\n        this.FS = options.FS;\n        this.PATH = options.PATH;\n        this.ERRNO_CODES = options.ERRNO_CODES;\n        this.API = this.createAPI(options);\n        this.driveName = options.driveName;\n        this.node_ops = new DriveFSEmscriptenNodeOps(this);\n        this.stream_ops = new DriveFSEmscriptenStreamOps(this);\n    }\n    /**\n     * Create the ContentsAPI.\n     *\n     * This is supposed to be overwritten if needed.\n     */\n    createAPI(options) {\n        if (!options.browsingContextId || !options.baseUrl) {\n            throw new Error('Cannot create service-worker API without current browsingContextId');\n        }\n        return new ServiceWorkerContentsAPI(options);\n    }\n    mount(mount) {\n        return this.createNode(null, mount.mountpoint, DIR_MODE | 511, 0);\n    }\n    createNode(parent, name, mode, dev) {\n        const FS = this.FS;\n        if (!FS.isDir(mode) && !FS.isFile(mode)) {\n            throw new FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n        }\n        const node = FS.createNode(parent, name, mode, dev);\n        node.node_ops = this.node_ops;\n        node.stream_ops = this.stream_ops;\n        return node;\n    }\n    getMode(path) {\n        return this.API.getmode(path);\n    }\n    realPath(node) {\n        const parts = [];\n        let currentNode = node;\n        parts.push(currentNode.name);\n        while (currentNode.parent !== currentNode) {\n            currentNode = currentNode.parent;\n            parts.push(currentNode.name);\n        }\n        parts.reverse();\n        return this.PATH.join.apply(null, parts);\n    }\n}\n//# sourceMappingURL=drivefs.js.map","import { PathExt } from '@jupyterlab/coreutils';\nimport { BLOCK_SIZE } from './drivefs';\nimport { DIR_MODE, FILE_MODE } from './emscripten';\n/**\n * Class for processing a drive request from the DriveFS.\n */\nexport class DriveContentsProcessor {\n    constructor(options) {\n        this.contentsManager = options.contentsManager;\n    }\n    async processDriveRequest(request) {\n        switch (request.method) {\n            case 'readdir':\n                return this.readdir(request);\n            case 'rmdir':\n                return this.rmdir(request);\n            case 'rename':\n                return this.rename(request);\n            case 'getmode':\n                return this.getmode(request);\n            case 'lookup':\n                return this.lookup(request);\n            case 'mknod':\n                return this.mknod(request);\n            case 'getattr':\n                return this.getattr(request);\n            case 'get':\n                return this.get(request);\n            case 'put':\n                return this.put(request);\n        }\n        throw `Drive request ${request.method} does not exist.`;\n    }\n    async readdir(request) {\n        const model = await this.contentsManager.get(request.path, { content: true });\n        let response = [];\n        if (model.type === 'directory' && model.content) {\n            response = model.content.map((subcontent) => subcontent.name);\n        }\n        return response;\n    }\n    async rmdir(request) {\n        await this.contentsManager.delete(request.path);\n        return null;\n    }\n    async rename(request) {\n        await this.contentsManager.rename(request.path, request.data.newPath);\n        return null;\n    }\n    async getmode(request) {\n        const model = await this.contentsManager.get(request.path);\n        let response;\n        if (model.type === 'directory') {\n            response = DIR_MODE;\n        }\n        else {\n            response = FILE_MODE;\n        }\n        return response;\n    }\n    async lookup(request) {\n        let response;\n        try {\n            const model = await this.contentsManager.get(request.path);\n            response = {\n                ok: true,\n                mode: model.type === 'directory' ? DIR_MODE : FILE_MODE,\n            };\n        }\n        catch (e) {\n            response = { ok: false };\n        }\n        return response;\n    }\n    async mknod(request) {\n        const model = await this.contentsManager.newUntitled({\n            path: PathExt.dirname(request.path),\n            type: request.data.mode === DIR_MODE ? 'directory' : 'file',\n            ext: PathExt.extname(request.path),\n        });\n        await this.contentsManager.rename(model.path, request.path);\n        return null;\n    }\n    async getattr(request) {\n        const model = await this.contentsManager.get(request.path);\n        // create a default date for drives that send incomplete information\n        // for nested foldes and files\n        const defaultDate = new Date(0).toISOString();\n        return {\n            dev: 1,\n            nlink: 1,\n            uid: 0,\n            gid: 0,\n            rdev: 0,\n            size: model.size || 0,\n            blksize: BLOCK_SIZE,\n            blocks: Math.ceil(model.size || 0 / BLOCK_SIZE),\n            atime: model.last_modified || defaultDate, // TODO Get the proper atime?\n            mtime: model.last_modified || defaultDate,\n            ctime: model.created || defaultDate,\n            timestamp: 0,\n        };\n    }\n    async get(request) {\n        const model = await this.contentsManager.get(request.path, { content: true });\n        let response;\n        if (model.type !== 'directory') {\n            response = {\n                content: model.format === 'json' ? JSON.stringify(model.content) : model.content,\n                format: model.format,\n            };\n        }\n        return response;\n    }\n    async put(request) {\n        await this.contentsManager.save(request.path, {\n            content: request.data.format === 'json'\n                ? JSON.parse(request.data.data)\n                : request.data.data,\n            type: 'file',\n            format: request.data.format,\n        });\n        return null;\n    }\n}\n//# sourceMappingURL=drivecontents.js.map"],"names":["MIME","FILE","JSON","PLAIN_TEXT","OCTET_STREAM","TYPES","parse","PageConfig","getOption","getType","ext","defaultType","toLowerCase","fileType","Object","values","fileExt","extensions","mimeTypes","length","hasFormat","fileFormat","DEFAULT_STORAGE_NAME","DRIVE_NAME","encoder","TextEncoder","decoder","TextDecoder","BrowserStorageDrive","constructor","options","_a","this","reduceBytesToString","data","byte","String","fromCharCode","_serverContents","Map","_isDisposed","_fileChanged","Signal","_storageName","_storageDrivers","_localforage","localforage","storageName","storageDrivers","_serverSettings","serverSettings","ServerConnection","makeSettings","_ready","PromiseDelegate","initialize","catch","console","warn","dispose","isDisposed","clearData","name","fileChanged","getDownloadUrl","path","Error","initStorage","resolve","_storage","createDefaultStorage","_counters","createDefaultCounters","_checkpoints","createDefaultCheckpoints","ready","promise","storage","then","counters","checkpoints","defaultStorageOptions","driver","version","createInstance","description","storeName","clearStorage","Promise","all","clear","newUntitled","_b","_c","type","created","Date","toISOString","dirname","PathExt","basename","extname","item","get","file","_incrementCounter","last_modified","format","mimetype","content","size","writable","counter","Private","EMPTY_NB","encode","stringify","startsWith","indexOf","key","setItem","emit","oldValue","newValue","copy","toDir","removeSlash","base","replace","toPath","decodeURIComponent","folder","_getFolder","getItem","serverItem","_getServerContents","model","contentMap","iterate","set","serverContents","Array","from","_getServerDirectory","has","rename","oldLocalPath","newLocalPath","modified","newFile","removeItem","child","URLExt","join","save","chunk","appendChunk","originalContent","lastChunk","contentBinaryString","_handleUploadChunk","decode","_binaryStringToBytes","btoa","slashed","toDelete","keys","filter","map","forgetPath","createCheckpoint","copies","Boolean","push","splice","id","listCheckpoints","normalizeCheckpoint","toString","restoreCheckpoint","checkpointID","parseInt","deleteCheckpoint","newContent","newContentBinaryString","atob","binaryString","bytes","Uint8Array","i","charCodeAt","includes","fileUrl","getBaseUrl","response","fetch","ok","headers","match","contentText","text","contentBuffer","arrayBuffer","contentBytes","reduce","apiURL","json","err","metadata","orig_nbformat","nbformat_minor","nbformat","cells","DIR_MODE","FILE_MODE","SEEK_CUR","SEEK_END","instanceOfStream","nodeOrStream","DRIVE_SEPARATOR","DRIVE_API_PATH","BLOCK_SIZE","flagNeedsWrite","DriveFSEmscriptenStreamOps","fs","open","stream","realPath","node","FS","isFile","mode","API","close","flags","parsedFlags","needsWrite","put","undefined","read","buffer","offset","position","Math","min","subarray","write","timestamp","now","oldData","llseek","whence","ErrnoError","ERRNO_CODES","EPERM","EINVAL","DriveFSEmscriptenNodeOps","getattr","value","ino","setattr","attr","entries","slice","lookup","parent","PATH","join2","result","createNode","mknod","dev","newDir","newName","oldNode","newDirNode","unlink","rmdir","readdir","symlink","oldPath","readlink","ContentsAPI","_driveName","driveName","_mountpoint","mountpoint","request","method","normalizePath","getmode","newPath","dirlist","serializedContent","binString","len","binary","byteLength","stats","atime","mtime","ctime","ServiceWorkerContentsAPI","super","_baseUrl","baseUrl","_browsingContextId","browsingContextId","xhr","XMLHttpRequest","encodeURI","endpoint","requestWithBrowsingContextId","send","e","error","status","responseText","DriveFS","createAPI","node_ops","stream_ops","mount","isDir","getMode","parts","currentNode","reverse","apply","DriveContentsProcessor","contentsManager","processDriveRequest","subcontent","delete","defaultDate","nlink","uid","gid","rdev","blksize","blocks","ceil"],"sourceRoot":""}