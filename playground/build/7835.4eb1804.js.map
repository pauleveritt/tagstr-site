{"version":3,"file":"7835.4eb1804.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/service-worker-manager.js"],"sourcesContent":["import { Token } from '@lumino/coreutils';\nimport SW_URL from './service-worker?text';\n/**\n * The token for the ServiceWorker.\n */\nexport const IServiceWorkerManager = new Token('@jupyterlite/server:IServiceWorkerManager');\nexport const WORKER_NAME = `${SW_URL}`.split('/').slice(-1)[0];\n//# sourceMappingURL=tokens.js.map","import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { DRIVE_API_PATH, DriveContentsProcessor, } from '@jupyterlite/contents';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { WORKER_NAME } from './tokens';\n/**\n * The version of the app\n */\nconst VERSION = PageConfig.getOption('appVersion');\n/**\n * Used to keep the service worker alive\n */\nconst SW_PING_ENDPOINT = '/api/service-worker-heartbeat';\n/**\n * A class that manages the ServiceWorker registration and communication,\n * used for accessing the file system.\n */\nexport class ServiceWorkerManager {\n    /**\n     * Construct a new ServiceWorkerManager.\n     */\n    constructor(options) {\n        var _a;\n        /**\n         * Handle a message received on the BroadcastChannel\n         */\n        this._onBroadcastMessage = async (event) => {\n            const { data, browsingContextId } = event.data;\n            if (browsingContextId !== this._browsingContextId) {\n                // Message is not meant for us\n                return;\n            }\n            const response = await this._driveContentsProcessor.processDriveRequest(data);\n            // pass the browsingContextId along so the Service Worker can identify the request\n            this._broadcastChannel.postMessage({\n                response,\n                browsingContextId: this._browsingContextId,\n            });\n        };\n        this._registration = null;\n        this._registrationChanged = new Signal(this);\n        this._ready = new PromiseDelegate();\n        const workerUrl = (_a = options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);\n        const fullWorkerUrl = new URL(workerUrl, window.location.href);\n        const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';\n        fullWorkerUrl.searchParams.set('enableCache', enableCache);\n        // Initialize broadcast channel related properties\n        this._browsingContextId = UUID.uuid4();\n        this._contents = options.contents;\n        this._broadcastChannel = new BroadcastChannel(DRIVE_API_PATH);\n        this._broadcastChannel.addEventListener('message', this._onBroadcastMessage);\n        this._driveContentsProcessor = new DriveContentsProcessor({\n            contentsManager: this._contents,\n        });\n        void this._initialize(fullWorkerUrl.href).catch(console.warn);\n    }\n    /**\n     * A signal emitted when the registration changes.\n     */\n    get registrationChanged() {\n        return this._registrationChanged;\n    }\n    /**\n     * Whether the ServiceWorker is enabled or not.\n     */\n    get enabled() {\n        return this._registration !== null;\n    }\n    /**\n     * A unique id to identify the browsing context where the ServiceWorkerManager was instantiated.\n     */\n    get browsingContextId() {\n        return this._browsingContextId;\n    }\n    /**\n     * Whether the ServiceWorker is ready or not.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Initialize the ServiceWorkerManager.\n     */\n    async _initialize(workerUrl) {\n        const { serviceWorker } = navigator;\n        let registration = null;\n        if (!serviceWorker) {\n            console.warn('ServiceWorkers not supported in this browser');\n            return;\n        }\n        else if (serviceWorker.controller) {\n            const scriptURL = serviceWorker.controller.scriptURL;\n            await this._unregisterOldServiceWorkers(scriptURL);\n            registration = (await serviceWorker.getRegistration(scriptURL)) || null;\n            // eslint-disable-next-line no-console\n            console.info('JupyterLite ServiceWorker was already registered');\n        }\n        if (!registration && serviceWorker) {\n            try {\n                // eslint-disable-next-line no-console\n                console.info('Registering new JupyterLite ServiceWorker', workerUrl);\n                registration = await serviceWorker.register(workerUrl);\n                // eslint-disable-next-line no-console\n                console.info('JupyterLite ServiceWorker was sucessfully registered');\n            }\n            catch (err) {\n                console.warn(err);\n                console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${err}`);\n            }\n        }\n        this._setRegistration(registration);\n        if (!registration) {\n            this._ready.reject(void 0);\n        }\n        else {\n            this._ready.resolve(void 0);\n            setTimeout(this._pingServiceWorker, 20000);\n        }\n    }\n    /**\n     * Unregister old service workers if the version has changed.\n     */\n    async _unregisterOldServiceWorkers(scriptURL) {\n        const versionKey = `${scriptURL}-version`;\n        // Check if we have an installed version. If we do, compare it to the current version\n        // and unregister all service workers if they are different.\n        const installedVersion = localStorage.getItem(versionKey);\n        if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {\n            // eslint-disable-next-line no-console\n            console.info('New version, unregistering existing service workers.');\n            const registrations = await navigator.serviceWorker.getRegistrations();\n            await Promise.all(registrations.map((registration) => registration.unregister()));\n            // eslint-disable-next-line no-console\n            console.info('All existing service workers have been unregistered.');\n        }\n        localStorage.setItem(versionKey, VERSION);\n    }\n    /**\n     * Ping the service worker to keep it alive.\n     */\n    async _pingServiceWorker() {\n        const response = await fetch(SW_PING_ENDPOINT);\n        const text = await response.text();\n        if (text === 'ok') {\n            setTimeout(this._pingServiceWorker, 20000);\n        }\n    }\n    /**\n     * Set the registration and emit a signal.\n     */\n    _setRegistration(registration) {\n        this._registration = registration;\n        this._registrationChanged.emit(this._registration);\n    }\n}\n//# sourceMappingURL=service-worker-manager.js.map"],"names":["IServiceWorkerManager","Token","WORKER_NAME","split","slice","VERSION","PageConfig","getOption","ServiceWorkerManager","constructor","options","_a","this","_onBroadcastMessage","async","event","data","browsingContextId","_browsingContextId","response","_driveContentsProcessor","processDriveRequest","_broadcastChannel","postMessage","_registration","_registrationChanged","Signal","_ready","PromiseDelegate","workerUrl","URLExt","join","getBaseUrl","fullWorkerUrl","URL","window","location","href","enableCache","searchParams","set","UUID","uuid4","_contents","contents","BroadcastChannel","DRIVE_API_PATH","addEventListener","DriveContentsProcessor","contentsManager","_initialize","catch","console","warn","registrationChanged","enabled","ready","promise","serviceWorker","navigator","registration","controller","scriptURL","_unregisterOldServiceWorkers","getRegistration","info","register","err","_setRegistration","resolve","setTimeout","_pingServiceWorker","reject","versionKey","installedVersion","localStorage","getItem","registrations","getRegistrations","Promise","all","map","unregister","setItem","fetch","text","emit"],"sourceRoot":""}