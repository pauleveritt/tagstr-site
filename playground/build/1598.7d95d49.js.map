{"version":3,"file":"1598.7d95d49.js","mappings":"+LAWIA,E,iEACJ,SAAWA,GAIPA,EAAWC,kBAAoB,8BAClC,CALD,CAKGD,IAAeA,EAAa,CAAC,IAIhC,MAAME,EAAiB,CACnBC,GAAI,qDACJC,WAAW,EACXC,SAAU,EAAAC,gBACVC,SAAWC,GACA,IAAI,EAAAC,oBAMNC,EAAsB,CAC/BP,GAAI,oDACJQ,YAAa,wBACbP,WAAW,EACXQ,SAAU,CAAC,EAAAC,WAAWC,MAAO,EAAAC,YAAa,EAAAC,iBAC1CX,SAAU,EAAAY,eACVV,SAAU,CAACC,EAAKU,EAAMC,EAAYC,KAC9B,IAAIC,EACJ,MAAMC,EAAgG,QAA5ED,EAAKH,aAAmC,EAASA,EAAKI,wBAAqC,IAAPD,EAAgBA,EAAK,GACnI,GAAgC,IAA5BC,EAAiBC,OACjB,MAAO,CACHC,KAAMC,UAEFC,QAAQR,KAAK,6DAA6D,GAItF,MAAM,SAAES,EAAQ,eAAEC,EAAc,MAAEC,GAAUrB,EAEtCsB,GADNX,EAAaA,QAA+CA,EAAa,EAAAY,gBAChDC,KAAK,cACxBC,EAAWH,EAAMI,GAAG,kBACpBC,EAAcL,EAAMI,GAAG,2BAEvBE,EAAU,IAAI,EAAAC,cAAc,CAC9BC,UAFc,mBAwClB,OAhBAX,EAASY,WAAWvC,EAAWC,kBAAmB,CAC9CuC,MAAOL,EACPM,QAAUC,IACN,MAAMC,EAvBd,SAAsBD,GAClB,MAAME,EAAQ,IAAI,EAAAC,oBAAoB,IAC/BH,EACHI,WAAY,CACRxB,oBAEJyB,eAAgBnB,EAAemB,eAC/BC,mBAAoB,CAACtC,EAAoBP,IACzCgB,WAAYA,QAA+CA,EAAa,EAAAY,iBAEtEkB,EAAU,IAAI,EAAAC,QAAQ,CACxBN,QACAzB,WAAYA,QAA+CA,EAAa,EAAAY,iBAM5E,OAJAkB,EAAQE,MAAMX,MAAQL,EACtBc,EAAQE,MAAMC,KAAO,EAAAC,cACrBJ,EAAQE,MAAMG,QAAUxB,EAAMI,GAAG,kBACpB,IAAI,EAAAqB,eAAe,CAAEN,UAASO,OAAQZ,EAAMa,OAE7D,CAIqBC,CAAahB,GAO1B,OANAb,EAAM8B,IAAIhB,EAAM,OAAQ,CAAEiB,KAAM,YAE3BxB,EAAQuB,IAAIhB,GACjBA,EAAKM,QAAQL,MAAMiB,mBAAmBC,SAAQ,KACrC1B,EAAQ2B,KAAKpB,EAAK,IAEpBA,CAAI,IAGfvB,GACAA,EAAQ4C,QAAQ,CAAEC,QAASjE,EAAWC,kBAAmBgC,aAEtD,CACHT,KAAM,IACKhB,EAAImB,SAASc,QAAQzC,EAAWC,mBAE9C,GAMHiE,EAAsB,CACxB/D,GAAI,0DACJQ,YAAa,kDACbP,WAAW,EACXC,SAAU,EAAA8D,qBACV5D,SAAWC,GACA,IAAI,EAAA4D,yBAQnB,EALgB,CACZlE,EACAQ,EACAwD,E","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/apputils-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterLab, } from '@jupyterlab/application';\nimport { ILicensesClient, ICommandPalette, MainAreaWidget, WidgetTracker, } from '@jupyterlab/apputils';\nimport { IPluginManager, Plugins } from '@jupyterlab/pluginmanager';\nimport { ITranslator, ITranslatorConnector, nullTranslator, } from '@jupyterlab/translation';\nimport { extensionIcon } from '@jupyterlab/ui-components';\nimport { LiteLicensesClient, LitePluginListModel, LiteTranslatorConnector, } from '@jupyterlite/apputils';\n/**\n * The command IDs used by the apputils extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * The command ID for opening the plugin manager.\n     */\n    CommandIDs.openPluginManager = 'apputils:open-plugin-manager';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The client for fetching licenses data.\n */\nconst licensesClient = {\n    id: '@jupyterlite/application-extension:licenses-client',\n    autoStart: true,\n    provides: ILicensesClient,\n    activate: (app) => {\n        return new LiteLicensesClient();\n    },\n};\n/**\n * A plugin for managing the status of other plugins.\n */\nexport const pluginManagerPlugin = {\n    id: '@jupyterlite/application-extension:plugin-manager',\n    description: 'Plugin manager viewer',\n    autoStart: true,\n    optional: [JupyterLab.IInfo, ITranslator, ICommandPalette],\n    provides: IPluginManager,\n    activate: (app, info, translator, palette) => {\n        var _a;\n        const availablePlugins = (_a = info === null || info === void 0 ? void 0 : info.availablePlugins) !== null && _a !== void 0 ? _a : [];\n        if (availablePlugins.length === 0) {\n            return {\n                open: async () => {\n                    // eslint-disable-next-line no-console\n                    console.info('The application does not contain information about plugins');\n                },\n            };\n        }\n        const { commands, serviceManager, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Plugin Manager');\n        const widgetLabel = trans.__('Advanced Plugin Manager');\n        const namespace = 'plugin-manager';\n        const tracker = new WidgetTracker({\n            namespace: namespace,\n        });\n        function createWidget(args) {\n            const model = new LitePluginListModel({\n                ...args,\n                pluginData: {\n                    availablePlugins,\n                },\n                serverSettings: serviceManager.serverSettings,\n                extraLockedPlugins: [pluginManagerPlugin.id],\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            const content = new Plugins({\n                model,\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            content.title.label = widgetLabel;\n            content.title.icon = extensionIcon;\n            content.title.caption = trans.__('Plugin Manager');\n            const main = new MainAreaWidget({ content, reveal: model.ready });\n            return main;\n        }\n        commands.addCommand(CommandIDs.openPluginManager, {\n            label: widgetLabel,\n            execute: (args) => {\n                const main = createWidget(args);\n                shell.add(main, 'main', { type: 'Plugins' });\n                // add to tracker so it can be restored, and update when choices change\n                void tracker.add(main);\n                main.content.model.trackerDataChanged.connect(() => {\n                    void tracker.save(main);\n                });\n                return main;\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.openPluginManager, category });\n        }\n        return {\n            open: () => {\n                return app.commands.execute(CommandIDs.openPluginManager);\n            },\n        };\n    },\n};\n/**\n * The main translator connector plugin.\n */\nconst translatorConnector = {\n    id: '@jupyterlite/application-extension:translator-connector',\n    description: 'Provides the application translation connector.',\n    autoStart: true,\n    provides: ITranslatorConnector,\n    activate: (app) => {\n        return new LiteTranslatorConnector();\n    },\n};\nconst plugins = [\n    licensesClient,\n    pluginManagerPlugin,\n    translatorConnector,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["CommandIDs","openPluginManager","licensesClient","id","autoStart","provides","ILicensesClient","activate","app","LiteLicensesClient","pluginManagerPlugin","description","optional","JupyterLab","IInfo","ITranslator","ICommandPalette","IPluginManager","info","translator","palette","_a","availablePlugins","length","open","async","console","commands","serviceManager","shell","trans","nullTranslator","load","category","__","widgetLabel","tracker","WidgetTracker","namespace","addCommand","label","execute","args","main","model","LitePluginListModel","pluginData","serverSettings","extraLockedPlugins","content","Plugins","title","icon","extensionIcon","caption","MainAreaWidget","reveal","ready","createWidget","add","type","trackerDataChanged","connect","save","addItem","command","translatorConnector","ITranslatorConnector","LiteTranslatorConnector"],"sourceRoot":""}